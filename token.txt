I have a springboot backend application where jwt token mechanism is present and I am generating a new token with the help of referesh token .
My question is I have 50 apis in my application and during any api calls if token got expired , I can generate a new token with the help of access token but how that new access token is used to execute the same api that I was called




@Component
public class JwtTokenFilter extends OncePerRequestFilter {

    @Autowired
    private JwtTokenUtil jwtTokenUtil;

    @Autowired
    private UserService userService;

    @Override
    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain chain)
            throws ServletException, IOException {

        final String header = request.getHeader("Authorization");

        String username = null;
        String authToken = null;
        if (header != null && header.startsWith("Bearer ")) {
            authToken = header.substring(7);
            try {
                username = jwtTokenUtil.getUsernameFromToken(authToken);
            } catch (IllegalArgumentException e) {
                logger.error("an error occurred during getting username from token", e);
            } catch (ExpiredJwtException e) {
                logger.warn("the token is expired and not valid anymore", e);
            }
        } else {
            logger.warn("couldn't find bearer string, will ignore the header");
        }

        if (username != null && SecurityContextHolder.getContext().getAuthentication() == null) {

            UserDetails userDetails = userService.loadUserByUsername(username);

            if (jwtTokenUtil.validateToken(authToken, userDetails)) {
                UsernamePasswordAuthenticationToken authentication = new UsernamePasswordAuthenticationToken(userDetails, null, userDetails.getAuthorities());
                authentication.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));
                SecurityContextHolder.getContext().setAuthentication(authentication);
            }
        }

        try {
            chain.doFilter(request, response);
        } catch (ExpiredJwtException e) {
            logger.warn("the token is expired and not valid anymore, refreshing token...");
            String refreshToken = jwtTokenUtil.getRefreshToken(authToken);
            String newToken = jwtTokenUtil.generateTokenFromRefreshToken(refreshToken);
            response.setHeader("Authorization", "Bearer " + newToken);
            // send the new token to the frontend
            response.addHeader("New-Token", newToken);
            chain.doFilter(request, response);
        }
    }
}




// make an API call with the current access token
axios.get('/api/some-endpoint', {
  headers: {
    'Authorization': `Bearer ${accessToken}`
  }
}).then(response => {
  // handle the API response
}).catch(error => {
  // check if the error is due to an expired token
  if (error.response && error.response.status === 401 && error.response.headers['new-token']) {
    // retrieve the new token from the response headers
    const newToken = error.response.headers['new-token'];
    // update the current access token with the new token
    accessToken = newToken;
    // make the same API call with the new token
    axios.get('/api/some-endpoint', {
      headers: {
        'Authorization': `Bearer ${newToken}`
      }
    }).then(response => {
      // handle the API response
    }).catch(error => {
      // handle the API error
    });
  } else {
    // handle the API error
  }
});



